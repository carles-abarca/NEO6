#!/bin/bash

# NEO6 Deployment Script
# This script consolidates the complete NEO6 runtime environment

set -e

# Determine build type (debug or release)
BUILD_TYPE="debug"
if [ "$1" = "RELEASE" ]; then
    BUILD_TYPE="release"
    echo "Building for RELEASE mode"
else
    echo "Building for DEBUG mode"
fi

# Get the workspace root directory
WORKSPACE_ROOT="$(cd "$(dirname "$0")/../.." && pwd)"
RUNTIME_DIR="$WORKSPACE_ROOT/runtime"

echo "NEO6 Deployment Script"
echo "======================"
echo "Workspace: $WORKSPACE_ROOT"
echo "Runtime directory: $RUNTIME_DIR"
echo "Build type: $BUILD_TYPE"
echo ""

# Clean and create runtime directory structure
echo "Creating runtime directory structure..."
rm -rf "$RUNTIME_DIR"
mkdir -p "$RUNTIME_DIR"/{bin,lib,config,static,logs}

# Function to build a Rust project
build_project() {
    local project_path="$1"
    local project_name="$2"
    
    echo "Building $project_name..."
    cd "$project_path"
    if [ "$BUILD_TYPE" = "release" ]; then
        cargo build --release
    else
        cargo build
    fi
    cd "$WORKSPACE_ROOT"
}

# Build all components
echo "Building NEO6 components..."
echo ""

# 1. Build protocol libraries
echo "Building protocol libraries..."
build_project "$WORKSPACE_ROOT/neo6-protocols" "neo6-protocols"

# 2. Build neo6-proxy
echo "Building neo6-proxy..."
build_project "$WORKSPACE_ROOT/neo6-proxy" "neo6-proxy"

# 3. Build neo6-admin
echo "Building neo6-admin..."
build_project "$WORKSPACE_ROOT/neo6-admin" "neo6-admin"

echo ""
echo "Copying files to runtime environment..."

# Copy binaries
echo "Copying binaries..."
cp "$WORKSPACE_ROOT/neo6-admin/target/$BUILD_TYPE/neo6-admin" "$RUNTIME_DIR/bin/"
cp "$WORKSPACE_ROOT/neo6-proxy/target/$BUILD_TYPE/neo6-proxy" "$RUNTIME_DIR/bin/"

# Copy protocol libraries
echo "Copying protocol libraries..."
PROTOCOLS_TARGET="$WORKSPACE_ROOT/neo6-protocols/target/$BUILD_TYPE"
for protocol in tn3270 lu62 mq rest tcp jca; do
    if [ -f "$PROTOCOLS_TARGET/lib${protocol}.dylib" ]; then
        cp "$PROTOCOLS_TARGET/lib${protocol}.dylib" "$RUNTIME_DIR/lib/"
        echo "  Copied lib${protocol}.dylib"
    else
        echo "  Warning: lib${protocol}.dylib not found"
    fi
done

# Copy configurations
echo "Copying configurations..."

# Copy neo6-admin configuration
cp -r "$WORKSPACE_ROOT/neo6-admin/config" "$RUNTIME_DIR/config/admin"

# Copy neo6-proxy configurations
cp -r "$WORKSPACE_ROOT/neo6-proxy/config" "$RUNTIME_DIR/config/proxy"

# Copy static files (dashboard HTML)
echo "Copying static files..."
cp -r "$WORKSPACE_ROOT/neo6-admin/static"/* "$RUNTIME_DIR/static/"

# Update runtime configuration paths for neo6-admin
echo "Updating runtime configuration paths..."

# Create the runtime admin.yaml with correct paths
create_runtime_admin_config() {
    local source_config="$WORKSPACE_ROOT/neo6-admin/config/admin.yaml"
    local target_config="$RUNTIME_DIR/config/admin/admin.yaml"
    
    echo "Creating runtime admin configuration..."
    
    # Read the source configuration and extract admin settings
    local admin_port=$(grep -E '^\s*port:' "$source_config" | head -1 | sed 's/.*port: *//' | tr -d '"')
    local admin_bind=$(grep -E '^\s*bind_address:' "$source_config" | head -1 | sed 's/.*bind_address: *//' | tr -d '"')
    local admin_log_level=$(grep -E '^\s*log_level:' "$source_config" | head -1 | sed 's/.*log_level: *//' | tr -d '"')
    
    # Set defaults if not found
    admin_port=${admin_port:-8090}
    admin_bind=${admin_bind:-"0.0.0.0"}
    admin_log_level=${admin_log_level:-"info"}
    
    # Create the new configuration file with runtime paths
    cat > "$target_config" << EOF
# NEO6 Admin Configuration - Runtime Environment
# Generated by neo6deploy.sh from source configuration

admin:
  port: $admin_port
  bind_address: "$admin_bind"
  log_level: "$admin_log_level"

# Proxy instances to manage
proxy_instances:
  - name: "tn3270-primary"
    protocol: "tn3270"
    port: 2323
    admin_port: 3323
    auto_start: true
    config_path: "./config/proxy"
    binary_path: "./bin/neo6-proxy"
    working_directory: "."
    log_level: "debug"
    args:
      - "--config-dir"
      - "./config/proxy"
    
  - name: "rest-api"
    protocol: "rest"
    port: 8080
    admin_port: 9080
    auto_start: false
    config_path: "./config/proxy"
    binary_path: "./bin/neo6-proxy"
    working_directory: "."
    log_level: "info"
    args:
      - "--config-dir"
      - "./config/proxy"
    
  - name: "mq-gateway"
    protocol: "mq"
    port: 5001
    admin_port: 6001
    auto_start: false
    config_path: "./config/proxy"
    binary_path: "./bin/neo6-proxy"
    working_directory: "."
    log_level: "info"
    args:
      - "--config-dir"
      - "./config/proxy"
EOF

    echo "Runtime admin configuration created: $target_config"
}

# Create the runtime configuration
create_runtime_admin_config

# Create the main NEO6 control script
echo "Creating NEO6 control script..."
cat > "$RUNTIME_DIR/neo6.sh" << 'EOF'
#!/bin/bash

# NEO6 Runtime Control Script
set -e

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
ADMIN_PID_FILE="$SCRIPT_DIR/logs/neo6-admin.pid"
LOG_DIR="$SCRIPT_DIR/logs"

# Ensure log directory exists
mkdir -p "$LOG_DIR"

start_neo6() {
    echo "Starting NEO6 environment..."
    
    # Check if already running
    if [ -f "$ADMIN_PID_FILE" ] && kill -0 "$(cat "$ADMIN_PID_FILE")" 2>/dev/null; then
        echo "NEO6 Admin is already running (PID: $(cat "$ADMIN_PID_FILE"))"
        return 0
    fi
    
    # Change to runtime directory
    cd "$SCRIPT_DIR"
    
    # Set library path for dynamic loading
    export DYLD_LIBRARY_PATH="$SCRIPT_DIR/lib:$DYLD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$LD_LIBRARY_PATH"
    
    # Start NEO6 Admin in background
    echo "Starting NEO6 Admin server..."
    nohup "$SCRIPT_DIR/bin/neo6-admin" --config "$SCRIPT_DIR/config/admin/admin.yaml" > "$LOG_DIR/neo6-admin.log" 2>&1 &
    ADMIN_PID=$!
    echo $ADMIN_PID > "$ADMIN_PID_FILE"
    
    # Wait a moment to ensure it started
    sleep 2
    
    if kill -0 "$ADMIN_PID" 2>/dev/null; then
        echo "NEO6 Admin started successfully (PID: $ADMIN_PID)"
        echo "Dashboard available at: http://localhost:8090"
        echo "Admin API available at: http://localhost:8090/api"
        echo "Logs in: $LOG_DIR/"
    else
        echo "Failed to start NEO6 Admin"
        rm -f "$ADMIN_PID_FILE"
        return 1
    fi
}

stop_neo6() {
    echo "Stopping NEO6 environment..."
    
    if [ -f "$ADMIN_PID_FILE" ]; then
        ADMIN_PID=$(cat "$ADMIN_PID_FILE")
        if kill -0 "$ADMIN_PID" 2>/dev/null; then
            echo "Stopping NEO6 Admin (PID: $ADMIN_PID)..."
            
            # First try graceful shutdown via API
            if command -v curl >/dev/null 2>&1; then
                echo "Attempting graceful shutdown..."
                curl -s -X POST http://localhost:8090/api/proxies/stop-all > /dev/null 2>&1 || true
                sleep 2
            fi
            
            # Send SIGTERM
            kill "$ADMIN_PID" 2>/dev/null || true
            
            # Wait for graceful shutdown
            for i in {1..10}; do
                if ! kill -0 "$ADMIN_PID" 2>/dev/null; then
                    break
                fi
                sleep 1
            done
            
            # Force kill if still running
            if kill -0 "$ADMIN_PID" 2>/dev/null; then
                echo "Force killing NEO6 Admin..."
                kill -9 "$ADMIN_PID" 2>/dev/null || true
            fi
            
            echo "NEO6 Admin stopped"
        else
            echo "NEO6 Admin was not running"
        fi
        rm -f "$ADMIN_PID_FILE"
    else
        echo "No NEO6 Admin PID file found"
    fi
    
    # Clean up any remaining processes
    pkill -f "neo6-proxy" 2>/dev/null || true
    
    echo "NEO6 environment stopped"
}

status_neo6() {
    echo "NEO6 Environment Status:"
    echo "======================="
    
    if [ -f "$ADMIN_PID_FILE" ] && kill -0 "$(cat "$ADMIN_PID_FILE")" 2>/dev/null; then
        echo "NEO6 Admin: RUNNING (PID: $(cat "$ADMIN_PID_FILE"))"
        
        # Try to get status from API
        if command -v curl >/dev/null 2>&1; then
            echo ""
            echo "API Status:"
            curl -s http://localhost:8090/api/status 2>/dev/null | head -10 || echo "API not responding"
        fi
    else
        echo "NEO6 Admin: STOPPED"
    fi
    
    echo ""
    echo "Recent logs:"
    if [ -f "$LOG_DIR/neo6-admin.log" ]; then
        tail -5 "$LOG_DIR/neo6-admin.log" || true
    else
        echo "No log file found"
    fi
}

case "$1" in
    start)
        start_neo6
        ;;
    stop)
        stop_neo6
        ;;
    restart)
        stop_neo6
        sleep 2
        start_neo6
        ;;
    status)
        status_neo6
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        echo ""
        echo "Commands:"
        echo "  start   - Start NEO6 environment (admin + auto-start proxies)"
        echo "  stop    - Stop NEO6 environment (admin + all proxies)"
        echo "  restart - Restart NEO6 environment"
        echo "  status  - Show NEO6 environment status"
        exit 1
        ;;
esac
EOF

# Make the control script executable
chmod +x "$RUNTIME_DIR/neo6.sh"

# Create a README for the runtime environment
cat > "$RUNTIME_DIR/README.md" << EOF
# NEO6 Runtime Environment

This directory contains a complete, self-contained NEO6 runtime environment.

## Directory Structure

- \`bin/\` - Executable binaries (neo6-admin, neo6-proxy)
- \`lib/\` - Protocol shared libraries (.dylib files)
- \`config/\` - Configuration files
  - \`admin/\` - NEO6 Admin configuration
  - \`proxy/\` - NEO6 Proxy configuration
- \`static/\` - Web dashboard static files
- \`logs/\` - Runtime log files
- \`neo6.sh\` - Main control script

## Usage

### Start NEO6 Environment
\`\`\`bash
./neo6.sh start
\`\`\`

### Stop NEO6 Environment
\`\`\`bash
./neo6.sh stop
\`\`\`

### Check Status
\`\`\`bash
./neo6.sh status
\`\`\`

### Restart Environment
\`\`\`bash
./neo6.sh restart
\`\`\`

## Web Interface

Once started, the NEO6 Admin dashboard will be available at:
- Dashboard: http://localhost:8090
- API: http://localhost:8090/api

## Configuration

- Edit \`config/admin/admin.yaml\` to modify admin server settings and proxy instances
- Edit \`config/proxy/default.toml\` and \`config/proxy/transactions.yaml\` for proxy configuration

## Build Information

- Build type: $BUILD_TYPE
- Deployed: $(date)
- Workspace: $WORKSPACE_ROOT
EOF

echo ""
echo "Deployment completed successfully!"
echo "===========================================" 
echo "Runtime directory: $RUNTIME_DIR"
echo ""
echo "Files deployed:"
echo "- Binaries: neo6-admin, neo6-proxy"
echo "- Libraries: $(ls "$RUNTIME_DIR/lib" | wc -l | tr -d ' ') protocol libraries"
echo "- Configurations: admin and proxy configs"
echo "- Control script: neo6.sh"
echo ""
echo "To start NEO6:"
echo "  cd $RUNTIME_DIR"
echo "  ./neo6.sh start"
echo ""
echo "To access the dashboard:"
echo "  http://localhost:8090"
echo ""

# Optionally run a quick validation
echo "Running deployment validation..."
cd "$RUNTIME_DIR"

# Check if binaries are executable
if [ -x "bin/neo6-admin" ] && [ -x "bin/neo6-proxy" ]; then
    echo "✓ Binaries are executable"
else
    echo "✗ Binary validation failed"
    exit 1
fi

# Check if libraries exist
LIB_COUNT=$(ls lib/*.dylib 2>/dev/null | wc -l)
if [ "$LIB_COUNT" -gt 0 ]; then
    echo "✓ Found $LIB_COUNT protocol libraries"
else
    echo "✗ No protocol libraries found"
    exit 1
fi

# Check if configurations exist
if [ -f "config/admin/admin.yaml" ] && [ -f "config/proxy/default.toml" ]; then
    echo "✓ Configuration files present"
else
    echo "✗ Configuration validation failed"
    exit 1
fi

echo ""
echo "✓ Deployment validation passed!"
echo "NEO6 is ready to run from the runtime directory."
